---
import BaseLayout from '../layouts/BaseLayout.astro';

// Check if user is already authenticated (this will be enhanced with actual auth later)
const isAuthenticated = false; // TODO: Replace with actual auth check

// If already authenticated, redirect to chat
if (isAuthenticated) {
  return Astro.redirect('/');
}
---

<BaseLayout title="Reset your password - SIM-ONE" description="Reset your SIM-ONE account password to regain access to your conversations and settings">
  <div class="auth-container min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
    <div class="auth-card max-w-md w-full space-y-8">
      <!-- Header -->
      <div class="text-center">
        <div class="flex justify-center mb-6">
          <div class="w-16 h-16 bg-gradient-to-br from-green-500 to-teal-600 rounded-2xl flex items-center justify-center">
            <span class="text-white font-bold text-2xl">S1</span>
          </div>
        </div>
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white">
          Reset your password
        </h2>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Enter your email address and we'll send you a link to reset your password
        </p>
      </div>

      <!-- Reset Form -->
      <form class="reset-form mt-8 space-y-6" action="/api/auth/forgot-password" method="POST">
        <div class="space-y-4">
          <!-- Email Field -->
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autocomplete="email"
              required
              class="auth-input w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 dark:bg-gray-800 dark:text-white transition-colors"
              placeholder="Enter your email address"
            />
            <div class="error-message hidden mt-2 text-sm text-red-600 dark:text-red-400" id="email-error"></div>
          </div>
        </div>

        <!-- Submit Button -->
        <div>
          <button
            type="submit"
            class="reset-submit w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <span class="submit-text">Send reset link</span>
            <svg class="loading-spinner hidden animate-spin ml-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
        </div>

        <!-- Success Message -->
        <div class="success-message hidden mt-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
          <div class="flex">
            <svg class="w-5 h-5 text-green-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-green-800 dark:text-green-200">
                Reset link sent
              </h3>
              <p class="mt-1 text-sm text-green-700 dark:text-green-300">
                Check your email for a link to reset your password. If it doesn't appear within a few minutes, check your spam folder.
              </p>
            </div>
          </div>
        </div>

        <!-- Error Message -->
        <div class="form-error hidden mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
          <div class="flex">
            <svg class="w-5 h-5 text-red-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                Reset failed
              </h3>
              <p class="mt-1 text-sm text-red-700 dark:text-red-300" id="form-error-message">
                Please check your email address and try again.
              </p>
            </div>
          </div>
        </div>
      </form>

      <!-- Help Text -->
      <div class="help-text mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
        <div class="flex">
          <svg class="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-blue-800 dark:text-blue-200">
              Need help?
            </h3>
            <div class="mt-1 text-sm text-blue-700 dark:text-blue-300 space-y-1">
              <p>• Make sure you enter the email address associated with your SIM-ONE account</p>
              <p>• Check your spam or junk folder if you don't see the email</p>
              <p>• The reset link will expire in 1 hour for security</p>
              <p>• If you continue having trouble, you can create a new account</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Navigation Links -->
      <div class="flex flex-col space-y-4">
        <!-- Back to Login -->
        <div class="text-center">
          <a href="/login" class="inline-flex items-center text-sm text-green-600 hover:text-green-500 dark:text-green-400 dark:hover:text-green-300 transition-colors">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to login
          </a>
        </div>

        <!-- Sign Up Link -->
        <div class="text-center">
          <p class="text-sm text-gray-600 dark:text-gray-400">
            Don't have an account?
            <a href="/signup" class="font-medium text-green-600 hover:text-green-500 dark:text-green-400 dark:hover:text-green-300 transition-colors">
              Sign up for free
            </a>
          </p>
        </div>

        <!-- Guest Mode Link -->
        <div class="text-center pt-4 border-t border-gray-200 dark:border-gray-700">
          <a href="/" class="inline-flex items-center text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Continue as guest
          </a>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .auth-container {
    background-color: var(--color-bg-secondary);
  }
  
  .auth-card {
    background-color: var(--color-bg-primary);
    padding: 2rem;
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-lg);
    border: 1px solid var(--color-border-primary);
  }
  
  .auth-input {
    transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
  }
  
  .auth-input:focus {
    outline: none;
    border-color: var(--color-accent-primary);
    box-shadow: 0 0 0 3px rgba(16, 163, 127, 0.1);
  }
  
  .auth-input.error {
    border-color: var(--color-danger);
  }
  
  .auth-input.error:focus {
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
  
  .reset-submit:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  .success-message,
  .form-error,
  .help-text {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* High contrast mode adjustments */
  [data-theme="high-contrast"] .auth-card {
    border-width: 2px;
  }
  
  [data-theme="high-contrast"] .auth-input:focus {
    outline: 3px solid var(--color-accent-primary);
    outline-offset: 2px;
  }
  
  /* Focus states for navigation links */
  a:focus {
    outline: 2px solid var(--color-accent-primary);
    outline-offset: 2px;
    border-radius: var(--radius-sm);
  }
</style>

<script>
  // Forgot password form functionality
  class ForgotPasswordForm {
    private form: HTMLFormElement;
    private emailInput: HTMLInputElement;
    private submitButton: HTMLButtonElement;
    
    constructor() {
      this.form = document.querySelector('.reset-form') as HTMLFormElement;
      this.emailInput = document.getElementById('email') as HTMLInputElement;
      this.submitButton = document.querySelector('.reset-submit') as HTMLButtonElement;
      
      this.init();
    }
    
    private init() {
      this.setupEventListeners();
      this.setupValidation();
    }
    
    private setupEventListeners() {
      // Form submission
      this.form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit();
      });
      
      // Real-time validation
      this.emailInput.addEventListener('blur', () => {
        this.validateEmail();
      });
      
      // Clear errors on input
      this.emailInput.addEventListener('input', () => {
        this.clearFieldError('email');
        this.hideMessages();
      });
    }
    
    private setupValidation() {
      // Email validation
      this.emailInput.addEventListener('input', () => {
        const email = this.emailInput.value;
        if (email && !this.isValidEmail(email)) {
          this.emailInput.classList.add('error');
        } else {
          this.emailInput.classList.remove('error');
        }
      });
    }
    
    private async handleSubmit() {
      // Clear previous messages
      this.hideMessages();
      this.clearFieldError('email');
      
      // Validate email
      if (!this.validateEmail()) {
        return;
      }
      
      // Show loading state
      this.setLoadingState(true);
      
      try {
        const formData = new FormData(this.form);
        const response = await fetch('/api/auth/forgot-password', {
          method: 'POST',
          body: formData,
        });
        
        const result = await response.json();
        
        if (response.ok) {
          // Success - show success message
          this.showSuccessMessage();
          this.form.reset();
        } else {
          // Handle error
          this.showFormError(result.message || 'Failed to send reset email. Please try again.');
        }
      } catch (error) {
        console.error('Forgot password error:', error);
        this.showFormError('Network error. Please check your connection and try again.');
      } finally {
        this.setLoadingState(false);
      }
    }
    
    private validateEmail(): boolean {
      const email = this.emailInput.value.trim();
      
      if (!email) {
        this.showFieldError('email', 'Email address is required');
        return false;
      }
      
      if (!this.isValidEmail(email)) {
        this.showFieldError('email', 'Please enter a valid email address');
        return false;
      }
      
      return true;
    }
    
    private isValidEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
    
    private showFieldError(fieldName: string, message: string) {
      const input = document.getElementById(fieldName) as HTMLInputElement;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      if (input && errorElement) {
        input.classList.add('error');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }
    }
    
    private clearFieldError(fieldName: string) {
      const input = document.getElementById(fieldName) as HTMLInputElement;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      if (input && errorElement) {
        input.classList.remove('error');
        errorElement.classList.add('hidden');
      }
    }
    
    private showSuccessMessage() {
      const successElement = document.querySelector('.success-message');
      if (successElement) {
        successElement.classList.remove('hidden');
        
        // Scroll to success message
        successElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
    
    private showFormError(message: string) {
      const errorElement = document.querySelector('.form-error');
      const messageElement = document.getElementById('form-error-message');
      
      if (errorElement && messageElement) {
        messageElement.textContent = message;
        errorElement.classList.remove('hidden');
        
        // Scroll to error message
        errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
    
    private hideMessages() {
      const successElement = document.querySelector('.success-message');
      const errorElement = document.querySelector('.form-error');
      
      if (successElement) {
        successElement.classList.add('hidden');
      }
      
      if (errorElement) {
        errorElement.classList.add('hidden');
      }
    }
    
    private setLoadingState(loading: boolean) {
      const submitText = this.submitButton.querySelector('.submit-text');
      const loadingSpinner = this.submitButton.querySelector('.loading-spinner');
      
      if (loading) {
        this.submitButton.disabled = true;
        submitText?.classList.add('hidden');
        loadingSpinner?.classList.remove('hidden');
      } else {
        this.submitButton.disabled = false;
        submitText?.classList.remove('hidden');
        loadingSpinner?.classList.add('hidden');
      }
    }
  }
  
  // Initialize forgot password form when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ForgotPasswordForm();
    });
  } else {
    new ForgotPasswordForm();
  }
</script>

