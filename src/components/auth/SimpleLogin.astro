---
/**
 * Simple Login Component - Working Pattern
 * 
 * Uses the proven simple pattern for reliable button functionality.
 * Mobile-first responsive design with proper viewport handling.
 */
---

<div class="simple-login-container min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4 sm:px-6 lg:px-8">
  <div class="max-w-md w-full space-y-8">
    <!-- Header -->
    <div class="text-center">
      <div class="mx-auto h-12 w-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
        <span class="text-white font-bold text-lg">S1</span>
      </div>
      <h2 class="mt-6 text-3xl font-extrabold text-gray-900 dark:text-white">
        Sign in to SIM-ONE
      </h2>
      <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
        Experience the future of AI with cognitive governance
      </p>
    </div>

    <!-- Login Form -->
    <form class="mt-8 space-y-6">
      <div class="space-y-4">
        <!-- Email Field -->
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Email address
          </label>
          <input
            id="email"
            name="email"
            type="email"
            autocomplete="email"
            required
            class="appearance-none relative block w-full px-3 py-3 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
            placeholder="Enter your email"
          />
        </div>

        <!-- Password Field -->
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Password
          </label>
          <input
            id="password"
            name="password"
            type="password"
            autocomplete="current-password"
            required
            class="appearance-none relative block w-full px-3 py-3 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
            placeholder="Enter your password"
          />
        </div>
      </div>

      <!-- Remember Me & Forgot Password -->
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <input
            id="remember-me"
            name="remember-me"
            type="checkbox"
            class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded"
          />
          <label for="remember-me" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
            Remember me
          </label>
        </div>

        <div class="text-sm">
          <a href="/forgot-password" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
            Forgot your password?
          </a>
        </div>
      </div>

      <!-- Submit Button -->
      <div>
        <button
          type="submit"
          id="login-button"
          class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
        >
          <span id="login-button-text">Sign in</span>
          <div id="login-spinner" class="hidden ml-2">
            <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
        </button>
      </div>

      <!-- Status Message -->
      <div id="login-status" class="hidden text-center text-sm">
        <div id="login-status-content" class="p-3 rounded-lg"></div>
      </div>

      <!-- Sign Up Link -->
      <div class="text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">
          Don't have an account?
          <a href="/signup" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
            Sign up
          </a>
        </p>
      </div>
    </form>
  </div>
</div>

<script>
  // Simple, working login pattern (no client directive needed for basic functionality)
  console.log('üü¢ Simple Login Interface loaded');
  
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üü¢ Simple Login DOM ready');
    
    const loginForm = document.querySelector('form');
    const loginButton = document.getElementById('login-button');
    const loginButtonText = document.getElementById('login-button-text');
    const loginSpinner = document.getElementById('login-spinner');
    const loginStatus = document.getElementById('login-status');
    const loginStatusContent = document.getElementById('login-status-content');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    
    if (loginForm && loginButton && emailInput && passwordInput) {
      console.log('üü¢ All login elements found');
      
      // Form submit handler
      loginForm.addEventListener('submit', function(e) {
        e.preventDefault();
        handleLogin();
      });
      
      // Button click handler (backup)
      loginButton.addEventListener('click', function(e) {
        if (e.target.type !== 'submit') {
          e.preventDefault();
          handleLogin();
        }
      });
      
      function handleLogin() {
        const email = emailInput.value.trim();
        const password = passwordInput.value.trim();
        
        console.log('üü¢ Login attempt:', email);
        
        // Basic validation
        if (!email || !password) {
          showStatus('Please fill in all fields', 'error');
          return;
        }
        
        if (!isValidEmail(email)) {
          showStatus('Please enter a valid email address', 'error');
          return;
        }
        
        // Show loading state
        setLoading(true);
        showStatus('Signing in...', 'info');
        
        // Simulate authentication (replace with actual SIM-ONE Framework auth)
        setTimeout(() => {
          // Mock successful login
          if (email === 'demo@simone.ai' && password === 'demo123') {
            showStatus('Login successful! Redirecting...', 'success');
            setTimeout(() => {
              window.location.href = '/simple-chat';
            }, 1000);
          } else {
            showStatus('Invalid email or password', 'error');
            setLoading(false);
          }
        }, 1500);
      }
      
      function setLoading(loading) {
        if (loading) {
          loginButton.disabled = true;
          loginButtonText.textContent = 'Signing in...';
          loginSpinner.classList.remove('hidden');
        } else {
          loginButton.disabled = false;
          loginButtonText.textContent = 'Sign in';
          loginSpinner.classList.add('hidden');
        }
      }
      
      function showStatus(message, type) {
        const statusClasses = {
          success: 'bg-green-50 text-green-800 border border-green-200',
          error: 'bg-red-50 text-red-800 border border-red-200',
          info: 'bg-blue-50 text-blue-800 border border-blue-200'
        };
        
        loginStatusContent.textContent = message;
        loginStatusContent.className = `p-3 rounded-lg ${statusClasses[type] || statusClasses.info}`;
        loginStatus.classList.remove('hidden');
        
        if (type === 'error') {
          setTimeout(() => {
            loginStatus.classList.add('hidden');
          }, 5000);
        }
      }
      
      function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }
      
    } else {
      console.error('‚ùå Login elements not found');
    }
  });
</script>

<script client:load>
  // Enhanced functionality with client:load
  console.log('üîµ Simple Login client:load script executed');
  
  // Add any enhanced client-side functionality here
  setTimeout(() => {
    console.log('üîµ Simple Login enhanced features loaded');
    
    // Add demo credentials hint
    const emailInput = document.getElementById('email');
    if (emailInput) {
      emailInput.addEventListener('focus', function() {
        const statusContent = document.getElementById('login-status-content');
        const status = document.getElementById('login-status');
        if (statusContent && status) {
          statusContent.textContent = 'Demo: Use demo@simone.ai / demo123';
          statusContent.className = 'p-3 rounded-lg bg-yellow-50 text-yellow-800 border border-yellow-200';
          status.classList.remove('hidden');
        }
      });
    }
  }, 100);
</script>

<style>
  /* Mobile-first responsive design */
  .simple-login-container {
    min-height: 100vh;
    min-height: 100dvh; /* Dynamic viewport height for mobile */
  }
  
  /* Smooth transitions */
  input, button {
    transition: all 0.2s ease;
  }
  
  /* Focus states for accessibility */
  input:focus, button:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Mobile optimizations */
  @media (max-width: 640px) {
    .simple-login-container {
      padding: 1rem;
    }
  }
  
  /* Ensure 16px+ font-size on all inputs for mobile (prevents iOS zoom) */
  input {
    font-size: 16px;
  }
  
  /* Desktop can use smaller font if needed */
  @media (min-width: 641px) {
    input {
      font-size: 14px;
    }
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    input, button {
      border-width: 2px;
    }
  }
  
  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>

