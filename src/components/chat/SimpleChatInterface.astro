---
/**
 * Simple Chat Interface - Working Pattern
 * 
 * Uses the proven simple pattern that works reliably with Astro client:load.
 * Focuses on core functionality without complex class structures.
 */
---

<div class="simple-chat-container h-screen flex flex-col bg-white dark:bg-gray-900">
  <!-- Header -->
  <div class="chat-header flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
    <h1 class="text-lg font-semibold text-gray-900 dark:text-white">SIM-ONE Chat</h1>
    <div class="flex items-center space-x-2">
      <div class="w-2 h-2 bg-green-500 rounded-full"></div>
      <span class="text-sm text-gray-600 dark:text-gray-400">Connected</span>
    </div>
  </div>
  
  <!-- Messages Area -->
  <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4">
    <div class="message-bubble assistant">
      <div class="flex items-start space-x-3">
        <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
          S1
        </div>
        <div class="flex-1">
          <div class="bg-gray-100 dark:bg-gray-800 rounded-lg p-3">
            <p class="text-gray-900 dark:text-gray-100">
              Hello! I'm SIM-ONE, your AI assistant powered by the Five Laws of Cognitive Governance. How can I help you today?
            </p>
          </div>
          <div class="mt-1 text-xs text-gray-500 dark:text-gray-400">
            <span id="response-source">SIM-ONE Framework</span> ‚Ä¢ Quality: <span id="quality-score">95</span>%
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Input Area -->
  <div class="chat-input-area p-4 border-t border-gray-200 dark:border-gray-700">
    <div class="flex space-x-2">
      <input 
        type="text" 
        id="message-input"
        placeholder="Type your message..."
        class="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
      />
      <button 
        id="send-button"
        class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
      >
        Send
      </button>
    </div>
    <div id="status-indicator" class="mt-2 text-sm text-gray-500 dark:text-gray-400 hidden">
      Processing...
    </div>
  </div>
</div>

<script>
  // Simple, working JavaScript pattern (no client directive needed for basic functionality)
  console.log('üü¢ Simple Chat Interface loaded');
  
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üü¢ Simple Chat DOM ready');
    
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const messagesContainer = document.getElementById('messages-container');
    const statusIndicator = document.getElementById('status-indicator');
    
    if (messageInput && sendButton && messagesContainer) {
      console.log('üü¢ All chat elements found');
      
      // Send button click handler
      sendButton.addEventListener('click', function() {
        sendMessage();
      });
      
      // Enter key handler
      messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });
      
      async function sendMessage() {
        const message = messageInput.value.trim();
        if (!message) return;
        
        console.log('üü¢ Sending message:', message);
        
        // Add user message to chat
        addMessage(message, 'user');
        
        // Clear input
        messageInput.value = '';
        
        // Show processing status
        showStatus('Processing with SIM-ONE Framework...');
        
        // Call real SIM-ONE Framework API
        try {
          const response = await fetch('https://e5h6i7cd0vd6.manus.space/api/start_writing', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              topic: message,
              style: 'conversational',
              protocols: {
                agp: { enabled: true },
                rep: { enabled: true },
                esl: { enabled: true },
                ccp: { enabled: true },
                sp: { enabled: true }
              }
            })
          });
          
          if (!response.ok) {
            throw new Error(`SIM-ONE Framework error: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('üéâ SIM-ONE Framework Response:', data);
          
          // Poll for job completion
          const jobId = data.job_id;
          await pollJobCompletion(jobId, message);
          
        } catch (error) {
          console.warn('‚ö†Ô∏è SIM-ONE Framework failed, using fallback:', error);
          
          // Fallback to OpenAI (if available) or mock response
          const fallbackResponse = await getFallbackResponse(message);
          addMessage(fallbackResponse.content, 'assistant', fallbackResponse.metadata);
          hideStatus();
        }
      }
      
      // Poll SIM-ONE Framework job completion
      async function pollJobCompletion(jobId, originalMessage) {
        const maxAttempts = 30; // 30 seconds max
        let attempts = 0;
        
        while (attempts < maxAttempts) {
          try {
            const response = await fetch(`https://e5h6i7cd0vd6.manus.space/api/job_status/${jobId}`);
            const data = await response.json();
            
            console.log(`üîÑ Job ${jobId} status:`, data.status);
            
            if (data.status === 'completed') {
              // Get the final result
              const resultResponse = await fetch(`https://e5h6i7cd0vd6.manus.space/api/job_result/${jobId}`);
              const result = await resultResponse.json();
              
              console.log('‚úÖ SIM-ONE Framework job completed:', result);
              
              addMessage(result.final_output, 'assistant', {
                source: 'SIM-ONE Framework',
                processingTime: result.metadata?.processing_time || 'N/A',
                qualityScore: result.quality_metrics?.overall_score || 95,
                style: result.metadata?.style || 'conversational',
                protocolsApplied: result.metadata?.protocols_applied || ['AGP', 'REP', 'ESL', 'CCP', 'SP'],
                jobId: jobId
              });
              hideStatus();
              return;
              
            } else if (data.status === 'failed' || data.status === 'error') {
              throw new Error(`Job failed: ${data.error || 'Unknown error'}`);
            }
            
            // Update status with current stage
            if (data.current_stage) {
              showStatus(`Processing with SIM-ONE Framework... (${data.current_stage})`);
            }
            
            // Wait 1 second before next poll
            await new Promise(resolve => setTimeout(resolve, 1000));
            attempts++;
            
          } catch (error) {
            console.error('Error polling job:', error);
            throw error;
          }
        }
        
        throw new Error('Job polling timeout');
      }
      
      // Fallback response function
      async function getFallbackResponse(message) {
        // Try OpenAI fallback if available
        try {
          // This would use the OpenAI API key if configured
          // For now, return a clear fallback indicator
          return {
            content: `I received your message: "${message}". I'm currently using the fallback system as the SIM-ONE Framework is not available. How can I help you?`,
            metadata: {
              source: 'OpenAI Fallback',
              processingTime: 'N/A',
              qualityScore: 'N/A',
              style: 'fallback',
              protocolsApplied: ['None - Fallback Mode']
            }
          };
        } catch (error) {
          return {
            content: `I apologize, but I'm having trouble processing your request right now. Please try again in a moment.`,
            metadata: {
              source: 'Error Fallback',
              processingTime: 'N/A',
              qualityScore: 'N/A',
              style: 'error',
              protocolsApplied: ['None - Error Mode']
            }
          };
        }
      }
      
      function addMessage(content, role, metadata = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-bubble ' + role;
        
        if (role === 'user') {
          messageDiv.innerHTML = `
            <div class="flex items-start space-x-3 justify-end">
              <div class="flex-1 text-right">
                <div class="bg-blue-600 text-white rounded-lg p-3 inline-block">
                  <p>${content}</p>
                </div>
              </div>
              <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
                U
              </div>
            </div>
          `;
        } else {
          // Assistant message with dynamic metadata
          const source = metadata?.source || 'SIM-ONE Framework';
          const qualityScore = metadata?.qualityScore || 88;
          const processingTime = metadata?.processingTime || 'N/A';
          const protocolsApplied = metadata?.protocolsApplied || ['AGP', 'REP', 'ESL', 'CCP', 'SP'];
          
          // Determine icon and color based on source
          let iconClass = 'bg-gradient-to-r from-blue-500 to-purple-600';
          let sourceIcon = 'S1';
          let sourceText = source;
          
          if (source.includes('Fallback') || source.includes('Error')) {
            iconClass = 'bg-orange-500';
            sourceIcon = '‚ö†Ô∏è';
            sourceText = source;
          }
          
          messageDiv.innerHTML = `
            <div class="flex items-start space-x-3">
              <div class="w-8 h-8 ${iconClass} rounded-full flex items-center justify-center text-white text-sm font-medium">
                ${sourceIcon}
              </div>
              <div class="flex-1">
                <div class="bg-gray-100 dark:bg-gray-800 rounded-lg p-3">
                  <p class="text-gray-900 dark:text-gray-100">${content}</p>
                </div>
                <div class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  <span class="font-medium">${sourceText}</span>
                  ${qualityScore !== 'N/A' ? ` ‚Ä¢ Quality: <span class="font-medium">${qualityScore}%</span>` : ''}
                  ${processingTime !== 'N/A' ? ` ‚Ä¢ Time: <span>${processingTime}ms</span>` : ''}
                  ${protocolsApplied.length > 0 ? ` ‚Ä¢ Protocols: <span>${protocolsApplied.join(', ')}</span>` : ''}
                </div>
              </div>
            </div>
          `;
        }
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
      
      function showStatus(text) {
        if (statusIndicator) {
          statusIndicator.textContent = text;
          statusIndicator.classList.remove('hidden');
        }
      }
      
      function hideStatus() {
        if (statusIndicator) {
          statusIndicator.classList.add('hidden');
        }
      }
    } else {
      console.error('‚ùå Chat elements not found');
    }
  });
</script>

<script client:load>
  // Enhanced functionality with client:load (this works based on our testing)
  console.log('üîµ Simple Chat client:load script executed');
  
  // Add any enhanced client-side functionality here
  setTimeout(() => {
    console.log('üîµ Simple Chat enhanced features loaded');
  }, 100);
</script>

<style>
  .simple-chat-container {
    max-height: 100vh;
  }
  
  .message-bubble {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  #messages-container::-webkit-scrollbar {
    width: 6px;
  }
  
  #messages-container::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #messages-container::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 3px;
  }
  
  #messages-container::-webkit-scrollbar-thumb:hover {
    background: #a0aec0;
  }
</style>

